/**
 * Blackjack Gaming Service
 * A REST API to play Blackjack. Written in C++ with oat++.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BetGetResponse from '../model/BetGetResponse';
import BetRequest from '../model/BetRequest';
import BetResponse from '../model/BetResponse';
import CreateDeckResponse from '../model/CreateDeckResponse';
import CreateGameRequest from '../model/CreateGameRequest';
import CreateGameResponse from '../model/CreateGameResponse';
import CreatePlayerRequest from '../model/CreatePlayerRequest';
import CreatePlayerResponse from '../model/CreatePlayerResponse';
import GetPlayerResponse from '../model/GetPlayerResponse';
import HighscoreResponse from '../model/HighscoreResponse';
import HitResponse from '../model/HitResponse';
import InsuranceRequest from '../model/InsuranceRequest';
import SplitResponse from '../model/SplitResponse';
import StandResponse from '../model/StandResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDrawDeck operation.
     * @callback module:api/DefaultApi~createDrawDeckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Deck object
     * @param {module:api/DefaultApi~createDrawDeckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeckResponse}
     */
    createDrawDeck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateDeckResponse;
      return this.apiClient.callApi(
        '/v2/deck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGame operation.
     * @callback module:api/DefaultApi~createGameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Game.
     * @param {module:model/CreateGameRequest} createGameRequest 
     * @param {module:api/DefaultApi~createGameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGameResponse}
     */
    createGame(createGameRequest, callback) {
      let postBody = createGameRequest;
      // verify the required parameter 'createGameRequest' is set
      if (createGameRequest === undefined || createGameRequest === null) {
        throw new Error("Missing the required parameter 'createGameRequest' when calling createGame");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGameResponse;
      return this.apiClient.callApi(
        '/v2/game', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlayer operation.
     * @callback module:api/DefaultApi~createPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePlayerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Player object
     * @param {module:model/CreatePlayerRequest} createPlayerRequest 
     * @param {module:api/DefaultApi~createPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePlayerResponse}
     */
    createPlayer(createPlayerRequest, callback) {
      let postBody = createPlayerRequest;
      // verify the required parameter 'createPlayerRequest' is set
      if (createPlayerRequest === undefined || createPlayerRequest === null) {
        throw new Error("Missing the required parameter 'createPlayerRequest' when calling createPlayer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePlayerResponse;
      return this.apiClient.callApi(
        '/v2/player', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doubleBet operation.
     * @callback module:api/DefaultApi~doubleBetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Doubles the bet and takes another card. This option is only available when the first two cards are 9,10,11 in total.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {Number} betId Bet ID, retrieved by POST /v2/game/<GAMEID>/bet
     * @param {module:api/DefaultApi~doubleBetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HitResponse}
     */
    doubleBet(gameId, betId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling doubleBet");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling doubleBet");
      }

      let pathParams = {
        'gameId': gameId,
        'betId': betId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HitResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet/{betId}/double', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBet operation.
     * @callback module:api/DefaultApi~getBetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the dealer's cards, the dealer's total Value and who won the game.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {Number} betId Bet ID, retrieved by POST /v2/game/<GAMEID>/bet
     * @param {module:api/DefaultApi~getBetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetGetResponse}
     */
    getBet(gameId, betId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getBet");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling getBet");
      }

      let pathParams = {
        'gameId': gameId,
        'betId': betId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BetGetResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet/{betId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayer operation.
     * @callback module:api/DefaultApi~getPlayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPlayerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the cash a player owns
     * @param {Number} playerId Player ID, retrieved by POST /v2/player
     * @param {module:api/DefaultApi~getPlayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPlayerResponse}
     */
    getPlayer(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling getPlayer");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPlayerResponse;
      return this.apiClient.callApi(
        '/v2/player/{playerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the highscore operation.
     * @callback module:api/DefaultApi~highscoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HighscoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the highscore.
     * @param {module:api/DefaultApi~highscoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HighscoreResponse}
     */
    highscore(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HighscoreResponse;
      return this.apiClient.callApi(
        '/v2/highscore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hit operation.
     * @callback module:api/DefaultApi~hitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hit - takes another card.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {Number} betId Bet ID, retrieved by POST /v2/game/<GAMEID>/bet
     * @param {module:api/DefaultApi~hitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HitResponse}
     */
    hit(gameId, betId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling hit");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling hit");
      }

      let pathParams = {
        'gameId': gameId,
        'betId': betId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HitResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet/{betId}/hit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insurance operation.
     * @callback module:api/DefaultApi~insuranceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answers the dealer's question for an insurance. This option is only available when the dealer's first card as an Ace.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {Number} betId Bet ID, retrieved by POST /v2/game/<GAMEID>/bet
     * @param {module:model/InsuranceRequest} insuranceRequest 
     * @param {module:api/DefaultApi~insuranceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandResponse}
     */
    insurance(gameId, betId, insuranceRequest, callback) {
      let postBody = insuranceRequest;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling insurance");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling insurance");
      }
      // verify the required parameter 'insuranceRequest' is set
      if (insuranceRequest === undefined || insuranceRequest === null) {
        throw new Error("Missing the required parameter 'insuranceRequest' when calling insurance");
      }

      let pathParams = {
        'gameId': gameId,
        'betId': betId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet/{betId}/insurance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeBet operation.
     * @callback module:api/DefaultApi~placeBetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Places the initial bet on a game. Minimum 1, maximum 1000.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {module:model/BetRequest} betRequest 
     * @param {module:api/DefaultApi~placeBetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BetResponse}
     */
    placeBet(gameId, betRequest, callback) {
      let postBody = betRequest;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling placeBet");
      }
      // verify the required parameter 'betRequest' is set
      if (betRequest === undefined || betRequest === null) {
        throw new Error("Missing the required parameter 'betRequest' when calling placeBet");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BetResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the split operation.
     * @callback module:api/DefaultApi~splitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split your hand into two hands. Also draws 2 additional cards for each hand. This option is only available when the first two cards are of the same rank.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {Number} betId Bet ID, retrieved by POST /v2/game/<GAMEID>/bet
     * @param {module:api/DefaultApi~splitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitResponse}
     */
    split(gameId, betId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling split");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling split");
      }

      let pathParams = {
        'gameId': gameId,
        'betId': betId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SplitResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet/{betId}/split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stand operation.
     * @callback module:api/DefaultApi~standCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stand - Finishes the game, thus let's the dealer take cards and finally pays the winner.
     * @param {Number} gameId Game ID, retrieved by POST /v2/game
     * @param {Number} betId Bet ID, retrieved by POST /v2/game/<GAMEID>/bet
     * @param {module:api/DefaultApi~standCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandResponse}
     */
    stand(gameId, betId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling stand");
      }
      // verify the required parameter 'betId' is set
      if (betId === undefined || betId === null) {
        throw new Error("Missing the required parameter 'betId' when calling stand");
      }

      let pathParams = {
        'gameId': gameId,
        'betId': betId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StandResponse;
      return this.apiClient.callApi(
        '/v2/game/{gameId}/bet/{betId}/stand', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
