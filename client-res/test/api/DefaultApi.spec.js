/**
 * Blackjack Gaming Service
 * A REST API to play Blackjack. Written in C++ with oat++.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlackjackGamingService);
  }
}(this, function(expect, BlackjackGamingService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlackjackGamingService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createDrawDeck', function() {
      it('should call createDrawDeck successfully', function(done) {
        //uncomment below and update the code to test createDrawDeck
        //instance.createDrawDeck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGame', function() {
      it('should call createGame successfully', function(done) {
        //uncomment below and update the code to test createGame
        //instance.createGame(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPlayer', function() {
      it('should call createPlayer successfully', function(done) {
        //uncomment below and update the code to test createPlayer
        //instance.createPlayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doubleBet', function() {
      it('should call doubleBet successfully', function(done) {
        //uncomment below and update the code to test doubleBet
        //instance.doubleBet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBet', function() {
      it('should call getBet successfully', function(done) {
        //uncomment below and update the code to test getBet
        //instance.getBet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlayer', function() {
      it('should call getPlayer successfully', function(done) {
        //uncomment below and update the code to test getPlayer
        //instance.getPlayer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('highscore', function() {
      it('should call highscore successfully', function(done) {
        //uncomment below and update the code to test highscore
        //instance.highscore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hit', function() {
      it('should call hit successfully', function(done) {
        //uncomment below and update the code to test hit
        //instance.hit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('insurance', function() {
      it('should call insurance successfully', function(done) {
        //uncomment below and update the code to test insurance
        //instance.insurance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('placeBet', function() {
      it('should call placeBet successfully', function(done) {
        //uncomment below and update the code to test placeBet
        //instance.placeBet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('split', function() {
      it('should call split successfully', function(done) {
        //uncomment below and update the code to test split
        //instance.split(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stand', function() {
      it('should call stand successfully', function(done) {
        //uncomment below and update the code to test stand
        //instance.stand(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
